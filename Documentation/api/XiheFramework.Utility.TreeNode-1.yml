### YamlMime:ManagedReference
items:
- uid: XiheFramework.Utility.TreeNode`1
  commentId: T:XiheFramework.Utility.TreeNode`1
  id: TreeNode`1
  parent: XiheFramework.Utility
  children:
  - XiheFramework.Utility.TreeNode`1.#ctor(`0)
  - XiheFramework.Utility.TreeNode`1.AddChild(`0)
  - XiheFramework.Utility.TreeNode`1.AddChildren(`0[])
  - XiheFramework.Utility.TreeNode`1.Children
  - XiheFramework.Utility.TreeNode`1.Flatten
  - XiheFramework.Utility.TreeNode`1.Item(System.Int32)
  - XiheFramework.Utility.TreeNode`1.Parent
  - XiheFramework.Utility.TreeNode`1.RemoveChild(XiheFramework.Utility.TreeNode{`0})
  - XiheFramework.Utility.TreeNode`1.Traverse(Action{`0})
  - XiheFramework.Utility.TreeNode`1.Value
  langs:
  - csharp
  - vb
  name: TreeNode<T>
  nameWithType: TreeNode<T>
  fullName: XiheFramework.Utility.TreeNode<T>
  type: Class
  source:
    id: TreeNode
    path: ''
    startLine: 2224
  assemblies:
  - cs.temp.dll
  namespace: XiheFramework.Utility
  syntax:
    content: public class TreeNode<T>
    typeParameters:
    - id: T
    content.vb: Public Class TreeNode(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: TreeNode(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: XiheFramework.Utility.TreeNode(Of T)
  name.vb: TreeNode(Of T)
- uid: XiheFramework.Utility.TreeNode`1.#ctor(`0)
  commentId: M:XiheFramework.Utility.TreeNode`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: XiheFramework.Utility.TreeNode`1
  langs:
  - csharp
  - vb
  name: TreeNode(T)
  nameWithType: TreeNode<T>.TreeNode(T)
  fullName: XiheFramework.Utility.TreeNode<T>.TreeNode(T)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 2227
  assemblies:
  - cs.temp.dll
  namespace: XiheFramework.Utility
  syntax:
    content: public TreeNode(T value)
    parameters:
    - id: value
      type: '{T}'
    content.vb: Public Sub New(value As T)
  overload: XiheFramework.Utility.TreeNode`1.#ctor*
  nameWithType.vb: TreeNode(Of T).TreeNode(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).TreeNode(T)
- uid: XiheFramework.Utility.TreeNode`1.Item(System.Int32)
  commentId: P:XiheFramework.Utility.TreeNode`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: XiheFramework.Utility.TreeNode`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: TreeNode<T>.Item[Int32]
  fullName: XiheFramework.Utility.TreeNode<T>.Item[System.Int32]
  type: Property
  source:
    id: this[]
    path: ''
    startLine: 2231
  assemblies:
  - cs.temp.dll
  namespace: XiheFramework.Utility
  syntax:
    content: public TreeNode<T> this[int i] { get; }
    parameters:
    - id: i
      type: System.Int32
    return:
      type: XiheFramework.Utility.TreeNode`1
    content.vb: Public ReadOnly Property Item(i As Integer) As TreeNode(Of T)
  overload: XiheFramework.Utility.TreeNode`1.Item*
  nameWithType.vb: TreeNode(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: XiheFramework.Utility.TreeNode`1.Parent
  commentId: P:XiheFramework.Utility.TreeNode`1.Parent
  id: Parent
  parent: XiheFramework.Utility.TreeNode`1
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: TreeNode<T>.Parent
  fullName: XiheFramework.Utility.TreeNode<T>.Parent
  type: Property
  source:
    id: Parent
    path: ''
    startLine: 2233
  assemblies:
  - cs.temp.dll
  namespace: XiheFramework.Utility
  syntax:
    content: public TreeNode<T> Parent { get; }
    parameters: []
    return:
      type: XiheFramework.Utility.TreeNode`1
    content.vb: Public ReadOnly Property Parent As TreeNode(Of T)
  overload: XiheFramework.Utility.TreeNode`1.Parent*
  nameWithType.vb: TreeNode(Of T).Parent
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).Parent
- uid: XiheFramework.Utility.TreeNode`1.Value
  commentId: P:XiheFramework.Utility.TreeNode`1.Value
  id: Value
  parent: XiheFramework.Utility.TreeNode`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: TreeNode<T>.Value
  fullName: XiheFramework.Utility.TreeNode<T>.Value
  type: Property
  source:
    id: Value
    path: ''
    startLine: 2235
  assemblies:
  - cs.temp.dll
  namespace: XiheFramework.Utility
  syntax:
    content: public T Value { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property Value As T
  overload: XiheFramework.Utility.TreeNode`1.Value*
  nameWithType.vb: TreeNode(Of T).Value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).Value
- uid: XiheFramework.Utility.TreeNode`1.Children
  commentId: P:XiheFramework.Utility.TreeNode`1.Children
  id: Children
  parent: XiheFramework.Utility.TreeNode`1
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: TreeNode<T>.Children
  fullName: XiheFramework.Utility.TreeNode<T>.Children
  type: Property
  source:
    id: Children
    path: ''
    startLine: 2237
  assemblies:
  - cs.temp.dll
  namespace: XiheFramework.Utility
  syntax:
    content: public ReadOnlyCollection<TreeNode<T>> Children { get; }
    parameters: []
    return:
      type: Global.ReadOnlyCollection{XiheFramework.Utility.TreeNode`1}
    content.vb: Public ReadOnly Property Children As ReadOnlyCollection(Of TreeNode(Of T))
  overload: XiheFramework.Utility.TreeNode`1.Children*
  nameWithType.vb: TreeNode(Of T).Children
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).Children
- uid: XiheFramework.Utility.TreeNode`1.AddChild(`0)
  commentId: M:XiheFramework.Utility.TreeNode`1.AddChild(`0)
  id: AddChild(`0)
  parent: XiheFramework.Utility.TreeNode`1
  langs:
  - csharp
  - vb
  name: AddChild(T)
  nameWithType: TreeNode<T>.AddChild(T)
  fullName: XiheFramework.Utility.TreeNode<T>.AddChild(T)
  type: Method
  source:
    id: AddChild
    path: ''
    startLine: 2239
  assemblies:
  - cs.temp.dll
  namespace: XiheFramework.Utility
  syntax:
    content: public TreeNode<T> AddChild(T value)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: XiheFramework.Utility.TreeNode`1
    content.vb: Public Function AddChild(value As T) As TreeNode(Of T)
  overload: XiheFramework.Utility.TreeNode`1.AddChild*
  nameWithType.vb: TreeNode(Of T).AddChild(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).AddChild(T)
- uid: XiheFramework.Utility.TreeNode`1.AddChildren(`0[])
  commentId: M:XiheFramework.Utility.TreeNode`1.AddChildren(`0[])
  id: AddChildren(`0[])
  parent: XiheFramework.Utility.TreeNode`1
  langs:
  - csharp
  - vb
  name: AddChildren(T[])
  nameWithType: TreeNode<T>.AddChildren(T[])
  fullName: XiheFramework.Utility.TreeNode<T>.AddChildren(T[])
  type: Method
  source:
    id: AddChildren
    path: ''
    startLine: 2245
  assemblies:
  - cs.temp.dll
  namespace: XiheFramework.Utility
  syntax:
    content: public TreeNode<T>[] AddChildren(params T[] values)
    parameters:
    - id: values
      type: '{T}[]'
    return:
      type: XiheFramework.Utility.TreeNode`1[]
    content.vb: Public Function AddChildren(ParamArray values As T()) As TreeNode(Of T)()
  overload: XiheFramework.Utility.TreeNode`1.AddChildren*
  nameWithType.vb: TreeNode(Of T).AddChildren(T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).AddChildren(T())
  name.vb: AddChildren(T())
- uid: XiheFramework.Utility.TreeNode`1.RemoveChild(XiheFramework.Utility.TreeNode{`0})
  commentId: M:XiheFramework.Utility.TreeNode`1.RemoveChild(XiheFramework.Utility.TreeNode{`0})
  id: RemoveChild(XiheFramework.Utility.TreeNode{`0})
  parent: XiheFramework.Utility.TreeNode`1
  langs:
  - csharp
  - vb
  name: RemoveChild(TreeNode<T>)
  nameWithType: TreeNode<T>.RemoveChild(TreeNode<T>)
  fullName: XiheFramework.Utility.TreeNode<T>.RemoveChild(XiheFramework.Utility.TreeNode<T>)
  type: Method
  source:
    id: RemoveChild
    path: ''
    startLine: 2249
  assemblies:
  - cs.temp.dll
  namespace: XiheFramework.Utility
  syntax:
    content: public bool RemoveChild(TreeNode<T> node)
    parameters:
    - id: node
      type: XiheFramework.Utility.TreeNode`1
    return:
      type: System.Boolean
    content.vb: Public Function RemoveChild(node As TreeNode(Of T)) As Boolean
  overload: XiheFramework.Utility.TreeNode`1.RemoveChild*
  nameWithType.vb: TreeNode(Of T).RemoveChild(TreeNode(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).RemoveChild(XiheFramework.Utility.TreeNode(Of T))
  name.vb: RemoveChild(TreeNode(Of T))
- uid: XiheFramework.Utility.TreeNode`1.Traverse(Action{`0})
  commentId: M:XiheFramework.Utility.TreeNode`1.Traverse(Action{`0})
  id: Traverse(Action{`0})
  parent: XiheFramework.Utility.TreeNode`1
  langs:
  - csharp
  - vb
  name: Traverse(Action<T>)
  nameWithType: TreeNode<T>.Traverse(Action<T>)
  fullName: XiheFramework.Utility.TreeNode<T>.Traverse(Action<T>)
  type: Method
  source:
    id: Traverse
    path: ''
    startLine: 2253
  assemblies:
  - cs.temp.dll
  namespace: XiheFramework.Utility
  syntax:
    content: public void Traverse(Action<T> action)
    parameters:
    - id: action
      type: Global.Action{{T}}
    content.vb: Public Sub Traverse(action As Action(Of T))
  overload: XiheFramework.Utility.TreeNode`1.Traverse*
  nameWithType.vb: TreeNode(Of T).Traverse(Action(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).Traverse(Action(Of T))
  name.vb: Traverse(Action(Of T))
- uid: XiheFramework.Utility.TreeNode`1.Flatten
  commentId: M:XiheFramework.Utility.TreeNode`1.Flatten
  id: Flatten
  parent: XiheFramework.Utility.TreeNode`1
  langs:
  - csharp
  - vb
  name: Flatten()
  nameWithType: TreeNode<T>.Flatten()
  fullName: XiheFramework.Utility.TreeNode<T>.Flatten()
  type: Method
  source:
    id: Flatten
    path: ''
    startLine: 2259
  assemblies:
  - cs.temp.dll
  namespace: XiheFramework.Utility
  syntax:
    content: public IEnumerable<T> Flatten()
    return:
      type: Global.IEnumerable{{T}}
    content.vb: Public Function Flatten As IEnumerable(Of T)
  overload: XiheFramework.Utility.TreeNode`1.Flatten*
  nameWithType.vb: TreeNode(Of T).Flatten()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).Flatten()
references:
- uid: XiheFramework.Utility
  commentId: N:XiheFramework.Utility
  name: XiheFramework.Utility
  nameWithType: XiheFramework.Utility
  fullName: XiheFramework.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: XiheFramework.Utility.TreeNode`1.#ctor*
  commentId: Overload:XiheFramework.Utility.TreeNode`1.#ctor
  name: TreeNode
  nameWithType: TreeNode<T>.TreeNode
  fullName: XiheFramework.Utility.TreeNode<T>.TreeNode
  nameWithType.vb: TreeNode(Of T).TreeNode
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).TreeNode
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: XiheFramework.Utility.TreeNode`1.Item*
  commentId: Overload:XiheFramework.Utility.TreeNode`1.Item
  name: Item
  nameWithType: TreeNode<T>.Item
  fullName: XiheFramework.Utility.TreeNode<T>.Item
  nameWithType.vb: TreeNode(Of T).Item
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).Item
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: XiheFramework.Utility.TreeNode`1
  commentId: T:XiheFramework.Utility.TreeNode`1
  parent: XiheFramework.Utility
  name: TreeNode<T>
  nameWithType: TreeNode<T>
  fullName: XiheFramework.Utility.TreeNode<T>
  nameWithType.vb: TreeNode(Of T)
  fullName.vb: XiheFramework.Utility.TreeNode(Of T)
  name.vb: TreeNode(Of T)
  spec.csharp:
  - uid: XiheFramework.Utility.TreeNode`1
    name: TreeNode
    nameWithType: TreeNode
    fullName: XiheFramework.Utility.TreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XiheFramework.Utility.TreeNode`1
    name: TreeNode
    nameWithType: TreeNode
    fullName: XiheFramework.Utility.TreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: XiheFramework.Utility.TreeNode`1.Parent*
  commentId: Overload:XiheFramework.Utility.TreeNode`1.Parent
  name: Parent
  nameWithType: TreeNode<T>.Parent
  fullName: XiheFramework.Utility.TreeNode<T>.Parent
  nameWithType.vb: TreeNode(Of T).Parent
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).Parent
- uid: XiheFramework.Utility.TreeNode`1.Value*
  commentId: Overload:XiheFramework.Utility.TreeNode`1.Value
  name: Value
  nameWithType: TreeNode<T>.Value
  fullName: XiheFramework.Utility.TreeNode<T>.Value
  nameWithType.vb: TreeNode(Of T).Value
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).Value
- uid: XiheFramework.Utility.TreeNode`1.Children*
  commentId: Overload:XiheFramework.Utility.TreeNode`1.Children
  name: Children
  nameWithType: TreeNode<T>.Children
  fullName: XiheFramework.Utility.TreeNode<T>.Children
  nameWithType.vb: TreeNode(Of T).Children
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).Children
- uid: Global.ReadOnlyCollection{XiheFramework.Utility.TreeNode`1}
  commentId: '!:Global.ReadOnlyCollection{XiheFramework.Utility.TreeNode`1}'
  definition: Global.ReadOnlyCollection`1
  name: ReadOnlyCollection<TreeNode<T>>
  nameWithType: ReadOnlyCollection<TreeNode<T>>
  fullName: ReadOnlyCollection<XiheFramework.Utility.TreeNode<T>>
  nameWithType.vb: ReadOnlyCollection(Of TreeNode(Of T))
  fullName.vb: ReadOnlyCollection(Of XiheFramework.Utility.TreeNode(Of T))
  name.vb: ReadOnlyCollection(Of TreeNode(Of T))
  spec.csharp:
  - uid: Global.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: XiheFramework.Utility.TreeNode`1
    name: TreeNode
    nameWithType: TreeNode
    fullName: XiheFramework.Utility.TreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: XiheFramework.Utility.TreeNode`1
    name: TreeNode
    nameWithType: TreeNode
    fullName: XiheFramework.Utility.TreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.ReadOnlyCollection`1
  commentId: '!:Global.ReadOnlyCollection`1'
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: Global.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: XiheFramework.Utility.TreeNode`1.AddChild*
  commentId: Overload:XiheFramework.Utility.TreeNode`1.AddChild
  name: AddChild
  nameWithType: TreeNode<T>.AddChild
  fullName: XiheFramework.Utility.TreeNode<T>.AddChild
  nameWithType.vb: TreeNode(Of T).AddChild
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).AddChild
- uid: XiheFramework.Utility.TreeNode`1.AddChildren*
  commentId: Overload:XiheFramework.Utility.TreeNode`1.AddChildren
  name: AddChildren
  nameWithType: TreeNode<T>.AddChildren
  fullName: XiheFramework.Utility.TreeNode<T>.AddChildren
  nameWithType.vb: TreeNode(Of T).AddChildren
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).AddChildren
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: XiheFramework.Utility.TreeNode`1[]
  isExternal: true
  name: TreeNode<T>[]
  nameWithType: TreeNode<T>[]
  fullName: XiheFramework.Utility.TreeNode<T>[]
  nameWithType.vb: TreeNode(Of T)()
  fullName.vb: XiheFramework.Utility.TreeNode(Of T)()
  name.vb: TreeNode(Of T)()
  spec.csharp:
  - uid: XiheFramework.Utility.TreeNode`1
    name: TreeNode
    nameWithType: TreeNode
    fullName: XiheFramework.Utility.TreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: XiheFramework.Utility.TreeNode`1
    name: TreeNode
    nameWithType: TreeNode
    fullName: XiheFramework.Utility.TreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: XiheFramework.Utility.TreeNode`1.RemoveChild*
  commentId: Overload:XiheFramework.Utility.TreeNode`1.RemoveChild
  name: RemoveChild
  nameWithType: TreeNode<T>.RemoveChild
  fullName: XiheFramework.Utility.TreeNode<T>.RemoveChild
  nameWithType.vb: TreeNode(Of T).RemoveChild
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).RemoveChild
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: XiheFramework.Utility.TreeNode`1.Traverse*
  commentId: Overload:XiheFramework.Utility.TreeNode`1.Traverse
  name: Traverse
  nameWithType: TreeNode<T>.Traverse
  fullName: XiheFramework.Utility.TreeNode<T>.Traverse
  nameWithType.vb: TreeNode(Of T).Traverse
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).Traverse
- uid: Global.Action{{T}}
  commentId: '!:Global.Action{`0}'
  definition: Global.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Action`1
  commentId: '!:Global.Action`1'
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: XiheFramework.Utility.TreeNode`1.Flatten*
  commentId: Overload:XiheFramework.Utility.TreeNode`1.Flatten
  name: Flatten
  nameWithType: TreeNode<T>.Flatten
  fullName: XiheFramework.Utility.TreeNode<T>.Flatten
  nameWithType.vb: TreeNode(Of T).Flatten
  fullName.vb: XiheFramework.Utility.TreeNode(Of T).Flatten
- uid: Global.IEnumerable{{T}}
  commentId: '!:Global.IEnumerable{`0}'
  definition: Global.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
